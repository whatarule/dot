
# wk
# -- //

snippet import
  import ${1:String} exposing (..)

snippet importHtml
  import Html exposing (..)
  import Html.Attributes exposing (..)
  import Html.Events exposing (..)

snippet main
  main : Program Never Model Msg
    main = program {
            init = init
        ,   view = view
        ,   update = update
        ,   subscriptions = subscriptions
        }

snippet typeModel
  type alias Model = {
          ${1:String} : ${2:String}
      ,   ${1:String} : ${2:String}
      }

snippet init
  init = ( Model ${1:String}, Cmd.none )

snippet typeMsg
  type Msg =
          ${1:String}
      |   ${1:String}

snippet update
  update : Msg -> Model -> ( Model, Cmd Msg )
  update msg model = case msg of
      ${1:String} ->
          ( { model |  }, Cmd.none )
      ${1:String} ->
          ( { model |  }, Cmd.none )

snippet subscriptions
  subscriptions : Model -> Sub Msg
  subscriptions model = Sub.none

snippet view
  view : Model -> Html Msg
  view model =
    ${1:String} [] [
          ${1:String} [] []
      ,   ${1:String} [] []
      ]

# -- //


#snippet module
#options head
#	module `substitute(substitute(expand('%:r'), '[/\\]','.','g'),'^\%(\l*\.\)\?','','')` ${1} where${2}
#
#
#snippet import
#options head
#abbr    import
#alias   imp
#	import ${1:String}
#
#
#snippet importAs
#options head
#abbr    import ... as ...
#alias   impa
#	import ${1} as ${2}
#
#
#snippet importExposing
#options head
#abbr    import ... exposing (..)
#alias   impe
#	import ${1:Html} exposing (${2:..})
#
#
##snippet main
##options head
##	main : Signal Html
##	main =
##		${0}
#
#
#snippet case
#abbr    case ... of
#	case ${1} of
#		${2} -> ${0}
#
#
#snippet if
#abbr    if ... then ... else ...
#	if ${1} then
#		${2}
#	else
#		${3}
#
#
#snippet     let
#abbr        let ... in ...
#options     head
#	let ${1} =${2}
#	in
#		${3}
#
#
#snippet     lambda
#abbr        Î»
#	\ ${1:x} -> ${0}
